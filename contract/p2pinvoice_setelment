// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title P2P Invoice Settlement Contract
 * @dev This smart contract enables peer-to-peer invoice creation, payment, and settlement on the Ethereum blockchain.
 */
contract P2PInvoiceSettlement {
    enum InvoiceStatus { Created, Paid, Cancelled }

    struct Invoice {
        uint256 id;
        address payable issuer;
        address payer;
        uint256 amount;
        InvoiceStatus status;
        uint256 timestamp;
    }

    uint256 public invoiceCounter;
    mapping(uint256 => Invoice) public invoices;

    event InvoiceCreated(uint256 indexed id, address indexed issuer, address indexed payer, uint256 amount);
    event InvoicePaid(uint256 indexed id, address indexed payer);
    event InvoiceCancelled(uint256 indexed id, address indexed issuer);

    modifier onlyIssuer(uint256 _invoiceId) {
        require(msg.sender == invoices[_invoiceId].issuer, "Not the issuer of the invoice");
        _;
    }

    modifier onlyPayer(uint256 _invoiceId) {
        require(msg.sender == invoices[_invoiceId].payer, "Not the payer of the invoice");
        _;
    }

    modifier invoiceExists(uint256 _invoiceId) {
        require(_invoiceId < invoiceCounter, "Invoice does not exist");
        _;
    }

    // Function to create a new invoice
    function createInvoice(address _payer, uint256 _amount) external {
        require(_payer != address(0), "Invalid payer address");
        require(_amount > 0, "Amount must be greater than 0");

        invoices[invoiceCounter] = Invoice({
            id: invoiceCounter,
            issuer: payable(msg.sender),
            payer: _payer,
            amount: _amount,
            status: InvoiceStatus.Created,
            timestamp: block.timestamp
        });

        emit InvoiceCreated(invoiceCounter, msg.sender, _payer, _amount);
        invoiceCounter++;
    }

    // Function to pay an existing invoice
    function payInvoice(uint256 _invoiceId) external payable invoiceExists(_invoiceId) onlyPayer(_invoiceId) {
        Invoice storage invoice = invoices[_invoiceId];
        require(invoice.status == InvoiceStatus.Created, "Invoice not open for payment");
        require(msg.value == invoice.amount, "Incorrect payment amount");

        invoice.status = InvoiceStatus.Paid;
        invoice.issuer.transfer(msg.value);

        emit InvoicePaid(_invoiceId, msg.sender);
    }

    // Function to cancel an invoice
    function cancelInvoice(uint256 _invoiceId) external invoiceExists(_invoiceId) onlyIssuer(_invoiceId) {
        Invoice storage invoice = invoices[_invoiceId];
        require(invoice.status == InvoiceStatus.Created, "Invoice cannot be cancelled");
        invoice.status = InvoiceStatus.Cancelled;

        emit InvoiceCancelled(_invoiceId, msg.sender);
    }

    // Function to retrieve details of an invoice
    function getInvoice(uint256 _invoiceId) external view invoiceExists(_invoiceId) returns (Invoice memory) {
        return invoices[_invoiceId];
    }
}
